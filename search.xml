<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2024/01/10/CS136Notes/"/>
      <url>/2024/01/10/CS136Notes/</url>
      
        <content type="html"><![CDATA[<hr><hr><h1 id="CS-136-Course-Notes"><a href="#CS-136-Course-Notes" class="headerlink" title="CS 136 Course Notes"></a>CS 136 Course Notes</h1><h5 id="What-is-procedural-programming"><a href="#What-is-procedural-programming" class="headerlink" title="What is procedural programming?"></a>What is procedural programming?</h5><p>State machine &#x2F; Program change system state</p><h5 id="Topics-and-Themes"><a href="#Topics-and-Themes" class="headerlink" title="Topics and Themes"></a>Topics and Themes</h5><ol><li>System state &amp; Memory management</li><li>Procedural programming style</li><li>Data structures &amp; abstract data types</li><li>Algorithms design &amp; efficiency</li><li>Modularization</li><li>Medium size I&#x2F;O programs</li></ol><h5 id=""><a href="#" class="headerlink" title=""></a></h5>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>My PVZ Development Log</title>
      <link href="/2023/12/20/2023-12-20/"/>
      <url>/2023/12/20/2023-12-20/</url>
      
        <content type="html"><![CDATA[<h3 id="Development-Log-3"><a href="#Development-Log-3" class="headerlink" title="Development Log #3"></a>Development Log #3</h3><h4 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h4><p>I just made about six pushes during the past three days. Many new features were implemented (actually they’re not “new” because they should be really familiar to those who’ve played the game before :P), but anyways, this is another log for all the updates.</p><h4 id="Bugs-encountered💀💀💀"><a href="#Bugs-encountered💀💀💀" class="headerlink" title="Bugs encountered💀💀💀"></a>Bugs encountered💀💀💀</h4><p>So far I encountered three big bugs that confused me quite some while. Thanks god I managed to fix them all. Bugs that are the easiest to fix are those where problems are merely logics. That being said the goofiest and most devastating are stupid errors like typos.</p><ul><li><pre><code>for (int i = 0; i &lt; num; i)</code></pre></li></ul><p>​Notice how in the above for loop there’s no addition to i every iteration, which means something are not going to work out</p><ul><li><p>zms[k] but k should be i. Similar to above, typo errors.</p></li><li><p>Accidentally put some code blocks into a supposedly empty loop (took me one day to notice the bug, literally carefully read through the entire code five times to find it out).</p></li></ul><h5 id="Bug-1"><a href="#Bug-1" class="headerlink" title="Bug 1"></a>Bug 1</h5><p>Zombies could not spawn.</p><p>​At first I thought it is that there’s problem rendering the zombie and I couldn’t see it on the screen. So after making sure the logic for the zombie’s movement make sense I start the game and let the “invisible” zombie walk. However once I realize after a long period of time the game wouldn’t stop automatically I know for sure things go wrong with creating the zombie. So quickly I locate the function that explicitly does this, which is called createZM().</p><p>​The problem is cause by me putting the code block that actually creating the zombie inside of an empty loop that should do nothing when zms[i].used is false. After extracting it out the bug is fixed.</p><h5 id="Bug-2"><a href="#Bug-2" class="headerlink" title="Bug 2"></a>Bug 2</h5><p>Peashooter shoot even if zombies is behind it</p><p>​This one is simply logical error. At first I didn’t consider the relative distance between each zombie and each peashooter. So the logic before the bug is fixed is that if there’s a zombie on the row, the peashooter would shoot the pea. However, since this logic failed to consider the case when peashooter is somehow planted behind the zombie, i.e. plant.x &gt; zombie.x, the peashooter should stop shooting pea. That make more sense as regular peashooter’s head is confronting toward the right direction, and there’s no way it can shoot backward (there’s a reverse shooter which shoot backward, but we’re not making it in this game).</p><p>​My resolution is by nesting another loop which traverse all possible zombies in the current zombie pool, and by analyzing the relative distance between each zombies and each plant, each peashooter can dynamically justify which zombie should it shoot and which should it not.</p><p>​Later when I look back to my resolution to this bug, I found that such an extra loop causes further bugs.</p><h5 id="Bug-3"><a href="#Bug-3" class="headerlink" title="Bug 3"></a>Bug 3</h5><p>Peashooter shooting too much at a time</p><p>​From the resolution in bug 2 I traverse all zombies to analyze the relative distance between each zombie and each peashooter. Now, one thing is that I embedded the actual function of “shooting the pea” into the innermost side of the triple loop. The problem is quickly revealed: The more zombies on a same row, the faster each peashooter shoots than it should be.</p><p>​In the original Plants-vs-Zombies, no matter how many zombies there’s in front of a peashooter, the peashooter should always shoot at a same frequency. Which means the frequency of shooting is a constant, rather than a variable.</p><p>​The reason for the bug is because during the for-k-loop which loop through each zombie in the pool, the pea-shooting function specifically ran for that zombie, so let’s say if the peashooter shoot one pea per second per zombie, if there’s two zombies standing on a same row, then since the pea-shooting function is ran twice, the peashooter would shoot two peas per second. That being said the peashooter’s shooting frequency is positively related to the amount of zombies presented ahead of that specific peashooter. The more zombies ahead, seemingly the “faster” it shoots.</p><p>​What confuses me the most is analyze and locate the problem. In fact the peashooter did not shoot faster at all. The frequency of it shooting peas are all the same. The fact that it seems like the peashooter shoots faster is because the program is ran more than one time, by which one at a time is ought to be the correct idea. Then the solution becomes much more clear, which is simply by restricting the amount of time the pea-shooting program is ran. By setting the program only allowed to run once at a time, the peashooter shoots in a normal speed again. </p><p>​What’s more, the peashooter keep shooting after the first zombie is dead, and the flying peas that are shot before the dead zombie dies kept flying and hit the next zombie and causes damage. This is because all peas are individual and does not relate to the peashooter. The only job that the pea does is to fly toward the east and causes damage to any zombie when collide. </p><h4 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h4><p>​Debugging in C++ is a painful thing. The most critical step is not fixing the bug, but instead locating the bug. Honestly speaking though one would not be able to correctly locate a bug if he&#x2F;she doesn’t understand why the bug occur. So once the bug is located, it is probable that you already understand the problem and are ready to fix it smoothly.</p><h4 id="Some-pictures-showing-latest-developed-features"><a href="#Some-pictures-showing-latest-developed-features" class="headerlink" title="Some pictures showing latest developed features"></a>Some pictures showing latest developed features</h4><h5 id="Sunshine-Balance"><a href="#Sunshine-Balance" class="headerlink" title="Sunshine Balance"></a>Sunshine Balance</h5><p><img src="https://github.com/M4cr0Chen/MyPic/blob/main/img/202312201716049.png?raw=true" alt="202312201716049.png"></p><h5 id="Sunshine-Addition"><a href="#Sunshine-Addition" class="headerlink" title="Sunshine Addition"></a>Sunshine Addition</h5><p><img src="https://github.com/M4cr0Chen/MyPic/blob/main/img/202312201717784.png?raw=true" alt="202312201717784.png"></p><h5 id="Create-Zombies"><a href="#Create-Zombies" class="headerlink" title="Create Zombies"></a>Create Zombies</h5><p><img src="https://github.com/M4cr0Chen/MyPic/blob/main/img/202312201719988.png?raw=true" alt="202312201719988.png"></p><h5 id="Peashooter-shoots-Peas"><a href="#Peashooter-shoots-Peas" class="headerlink" title="Peashooter shoots Peas"></a>Peashooter shoots Peas</h5><p><img src="https://github.com/M4cr0Chen/MyPic/blob/main/img/202312201720526.png?raw=true" alt="202312201720526.png"></p><p><img src="https://github.com/M4cr0Chen/MyPic/blob/main/img/202312201723407.png?raw=true" alt="202312201723407.png"></p><h5 id="Zombie-die"><a href="#Zombie-die" class="headerlink" title="Zombie die"></a>Zombie die</h5><p><img src="https://github.com/M4cr0Chen/MyPic/blob/main/img/202312201724270.png?raw=true" alt="202312201724270.png"></p><h5 id="Game-Over"><a href="#Game-Over" class="headerlink" title="Game Over"></a>Game Over</h5><p><img src="https://github.com/M4cr0Chen/MyPic/blob/main/img/202312201726882.png?raw=true" alt="202312201726882.png"></p>]]></content>
      
      
      <categories>
          
          <category> School </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Game Development </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My PVZ Development Log</title>
      <link href="/2023/12/17/2023-12-17/"/>
      <url>/2023/12/17/2023-12-17/</url>
      
        <content type="html"><![CDATA[<h2 id="My-Plants-vs-Zombies-Development-Log-2"><a href="#My-Plants-vs-Zombies-Development-Log-2" class="headerlink" title="My-Plants-vs-Zombies Development Log #2"></a>My-Plants-vs-Zombies Development Log #2</h2><p>I just finished my last final exam yesterday so hey, I finally got free time to work on this lil project :P</p><p>Just to recap, what I did in the first day are basically setting up a bunch of background images like the images for the lawn and the toolbar. The entire game interface is created so that’s a good start for me.</p><h4 id="What-I-did-afterward-are-following"><a href="#What-I-did-afterward-are-following" class="headerlink" title="What I did afterward are following:"></a>What I did afterward are following:</h4><ol><li>Implemented selection and dragging of the plants</li><li>Enabling the plants to be “planted” on the ground</li><li>Iteratively display the picture set in the res folder to create the waving animation of the plants</li><li>Created a starting menu of the game</li><li>Randomly creating Sunshine, and…</li><li>Display the random Sunshine.</li></ol><p>I defined the own structure like</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">struct sunshineBall &#123;</span><br><span class="line">int x, y; // Coordinates for the X and Y Coord of sunshine when falling</span><br><span class="line">int frameIndex; // Index for the current displaying picture</span><br><span class="line">int destY; // Y-Coord for the destination of the falling sunshine</span><br><span class="line">bool used; // Using or not</span><br><span class="line">int timer; //</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>which is exactly something we learned in CS135. I’m not gonna lie, struct are indeed very useful and convenient.</p><p>One of the confusing topic is the pointer variable and memories, I would’ve to read the textbook to understand what it does lol.</p><h4 id="Starting-Menu"><a href="#Starting-Menu" class="headerlink" title="Starting Menu"></a>Starting Menu</h4><p><img src="https://raw.githubusercontent.com/M4cr0Chen/MyPic/main/img/202312171122020.png" alt="img"></p><h4 id="Selecting-and-Dragging-Plants"><a href="#Selecting-and-Dragging-Plants" class="headerlink" title="Selecting and Dragging Plants"></a>Selecting and Dragging Plants</h4><p><img src="https://github.com/M4cr0Chen/MyPic/blob/main/img/202312171125413.png?raw=true" alt="202312171125413.png"></p><h4 id="Planting-the-Plant-to-the-center-of-lawn-block"><a href="#Planting-the-Plant-to-the-center-of-lawn-block" class="headerlink" title="Planting the Plant to the center of lawn block"></a>Planting the Plant to the center of lawn block</h4><p><img src="https://github.com/M4cr0Chen/MyPic/blob/main/img/202312171126291.png?raw=true" alt="202312171126291.png"></p><h4 id="Displaying-Random-Sunshine"><a href="#Displaying-Random-Sunshine" class="headerlink" title="Displaying Random Sunshine"></a>Displaying Random Sunshine</h4><p><img src="https://github.com/M4cr0Chen/MyPic/blob/main/img/202312171127493.png?raw=true" alt="202312171127493.png"></p>]]></content>
      
      
      <categories>
          
          <category> School </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Game Development </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Math 135 Notes</title>
      <link href="/2023/12/14/Math135Notes/"/>
      <url>/2023/12/14/Math135Notes/</url>
      
        <content type="html"><![CDATA[<div class="row">    <embed src="/pdf/m135.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
      
      
      <categories>
          
          <category> School </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Course Notes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Math 137 Notes</title>
      <link href="/2023/12/14/Math137Notes/"/>
      <url>/2023/12/14/Math137Notes/</url>
      
        <content type="html"><![CDATA[<div class="row">    <embed src="/pdf/m137.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
      
      
      <categories>
          
          <category> School </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Course Notes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My PVZ Development Log</title>
      <link href="/2023/12/13/2023-12-13/"/>
      <url>/2023/12/13/2023-12-13/</url>
      
        <content type="html"><![CDATA[<h3 id="My-PVZ-Development-Log-1"><a href="#My-PVZ-Development-Log-1" class="headerlink" title="My PVZ Development Log #1"></a>My PVZ Development Log #1</h3><p>The project is based on C language, mainly focusing on C++. The IDE I used is Visual Studio 2022.</p><p>This is the first day of the development, I am looking forward of reproducing a well known 2D tower defense game Plants-vs-Zombies. I am new to C so I would’ve to learn all the basics and perhaps some deeper concepts of this programming language during the development. So for me basically this project is a pretty good preview of those bunch of concepts of C in advance.</p><p>I am planning to finish the project before the start of the winter term, which is gonna be January 8th. That being said I have roughly about 25 days to work on this project solely. Hopefully I can get over any bugs and errors during the development.</p><p>Following are what I did today,</p><ol><li>Create new project (empty project template) using any version of Visual Studio</li><li>Import materials</li><li>Implement primary game scene</li><li>Implement the tool bar at the top of the game panel</li><li>Implement the plant cards in the tool bar</li></ol><p><img src="https://raw.githubusercontent.com/M4cr0Chen/MyPic/main/img/202312132104368.png" alt="1"></p><p>Basically what I did today is to create an actual panel with size 900 * 600 (which is the default resolution of the original game) to display the content; added a background image; added a “tool bar” which held all the plants’ cards; wrote some functions that access the resource folder to get the available plant cards, and placed them on to the tool bar separated by a certain widths. Last thing I did today is to allow the program to peek message of user’s input, by far only left-click to grab up the plant, and yet not able to place the plants down. </p><p><img src="https://raw.githubusercontent.com/M4cr0Chen/MyPic/main/img/202312132106302.png" alt="2"></p><p><img src="https://raw.githubusercontent.com/M4cr0Chen/MyPic/main/img/202312132106995.png" alt="3"></p><p>C is honestly quite different from Racket,  the one I’ve down into for the past three months (it’s always waterloo 1A CS135), and honestly I’ve had enough of recursion. As an imperative language C works much different from functional languages like Lisp or Racket. It’s refreshing picking up concepts like for loop, while loop, if-else statements, and so on again. Even though the grammar mike seems identical between JAVA and C (and C++), I feel like they’re much different from each other as C really shows much more basic details of programming compared to JAVA.</p>]]></content>
      
      
      <categories>
          
          <category> School </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Game Development </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Hexo的个人博客网站搭建的简易教程</title>
      <link href="/2023/07/13/2023-07-13/"/>
      <url>/2023/07/13/2023-07-13/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-Github-搭建个人博客从0到1教程"><a href="#Hexo-Github-搭建个人博客从0到1教程" class="headerlink" title="Hexo + Github 搭建个人博客从0到1教程"></a><a href="https://so.csdn.net/so/search?q=Hexo&spm=1001.2101.3001.7020">Hexo</a> + Github 搭建个人博客从0到1教程</h1><h3 id="一、正式搭建博客前需要做的准备（软件安装）"><a href="#一、正式搭建博客前需要做的准备（软件安装）" class="headerlink" title="一、正式搭建博客前需要做的准备（软件安装）"></a>一、正式搭建博客前需要做的准备（软件安装）</h3><h5 id="搭建前置准备软件："><a href="#搭建前置准备软件：" class="headerlink" title="搭建前置准备软件："></a>搭建前置准备软件：</h5><p>Git：官网下载：<a href="https://git-scm.com/">https://git-scm.com/</a></p><p>Node.js 官网下载：<a href="http://nodejs.cn/">http://nodejs.cn/</a></p><h3 id="二、Hexo的安装"><a href="#二、Hexo的安装" class="headerlink" title="二、Hexo的安装"></a>二、Hexo的安装</h3><p>个人经历，国内使用npm经常出现莫名其妙报错情况（个人搭建过程中遇到不少次这样情况），于是在其他大佬的博客中学习到使用淘宝镜像源。</p><ol><li><h5 id="我们这里利用npm先安装cnpm"><a href="#我们这里利用npm先安装cnpm" class="headerlink" title="我们这里利用npm先安装cnpm"></a>我们这里利用npm先安装cnpm</h5></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>cnpm个人认为非常强大，当你遇到npm install “xxx” 出现恶心人的报错时（没错，你在搭建的过程中绝对会遇到至少几个抽象的报错，没有人能逃离 | 笑），不妨重新输入一次该死的指令，然后在指令前面加一个小巧可爱的 “ c ”。嗯，很多时候这样简单的操作就可以解决问题。</p><ol start="2"><li><h5 id="Win键输入-“Command”-或-“命令提示符”-打开cmd窗口，输入指令："><a href="#Win键输入-“Command”-或-“命令提示符”-打开cmd窗口，输入指令：" class="headerlink" title="Win键输入 “Command” 或 “命令提示符” 打开cmd窗口，输入指令："></a>Win键输入 “<strong>Command</strong>” 或 “<strong>命令提示符</strong>” 打开cmd窗口，输入指令：</h5></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure><ol start="3"><li><h5 id="在本地创建一个文件夹"><a href="#在本地创建一个文件夹" class="headerlink" title="在本地创建一个文件夹"></a>在本地创建一个文件夹</h5></li></ol><p>个人起名为Blog因为好记好认。随后右键 &#x2F; 点击Git Bash （这里就是我们会最常用到的命令终端窗口了，不过之后建议用Visual Studio Code的终端，会更好用）</p><ol start="4"><li><h5 id="初始化Hexo"><a href="#初始化Hexo" class="headerlink" title="初始化Hexo"></a>初始化Hexo</h5></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><ol start="5"><li><h5 id="检验hexo是否能够启动成功"><a href="#检验hexo是否能够启动成功" class="headerlink" title="检验hexo是否能够启动成功"></a>检验hexo是否能够启动成功</h5></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>看到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO  Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure><p>表示hexo成功启动</p><ol start="6"><li><h5 id="博客文件初始化成功后，来看看你的Blog文件夹里都有什么"><a href="#博客文件初始化成功后，来看看你的Blog文件夹里都有什么" class="headerlink" title="博客文件初始化成功后，来看看你的Blog文件夹里都有什么"></a>博客文件初始化成功后，来看看你的Blog文件夹里都有什么</h5><ol><li>node_modules: 依赖包 （后期魔改网站用到如pug，stylus，以及一大堆dependencies都会存放在这个网站）</li><li>public：存放生成的页面</li><li>scaffolds：生成文章的一些模板</li><li>source：用来存放你的文章，css文件，js文件，后期写文章就要用到这个文件夹</li><li>themes：主题（如果使用的是 git clone 则会下载到这个文件夹中，如果是 npm install 则会在上面1. node_modules 里）</li><li>_config.yml: 博客的配置文件 （这个文件很重要，是整个网页的基底，千万要保存好）</li></ol></li><li><h5 id="此时到浏览器里输入"><a href="#此时到浏览器里输入" class="headerlink" title="此时到浏览器里输入"></a>此时到浏览器里输入</h5></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:4000/</span><br></pre></td></tr></table></figure><p>即可看到你最初始化的博客网页了。</p><p>记住这个时候你的博客网页都只是本地文件，你也能看见你进入的网址为localhost，而你需要把你本地的文件部署到互联网上，别人才能通过输入域名来访问你的网站。</p><p>怎么做呢？我们使用大伙最常用的方式：部署到Github进行代码云保管。</p><h3 id="三，将Hexo部署到Github"><a href="#三，将Hexo部署到Github" class="headerlink" title="三，将Hexo部署到Github"></a>三，将Hexo部署到Github</h3><h5 id="1-Github创建个人仓库"><a href="#1-Github创建个人仓库" class="headerlink" title="1.Github创建个人仓库"></a>1.Github创建个人仓库</h5><p>首先，需要有一个github账号。登上账号后建一个仓库：仓库名为你的用户名.github.io，<br>举例如下：<br>创建一个和你用户名相同的仓库，后面加.github.io，<br>只有这样，将来要部署到GitHub的时候，才会被识别，也就是xxxx.github.io，其中xxx就是你注册GitHub的用户名.</p><h5 id="2-生成ssh添加到Github"><a href="#2-生成ssh添加到Github" class="headerlink" title="2.生成ssh添加到Github"></a>2.生成ssh添加到Github</h5><h5 id="在Github上创建仓库完成之后，需要设置ssh免密登录"><a href="#在Github上创建仓库完成之后，需要设置ssh免密登录" class="headerlink" title="在Github上创建仓库完成之后，需要设置ssh免密登录"></a>在Github上创建仓库完成之后，需要设置ssh免密登录</h5><p>1.打开cmd窗口：执行如下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;yourname&quot;</span><br><span class="line">git config --global user.email &quot;youremail&quot;</span><br></pre></td></tr></table></figure><p>这里的yourname输入你的GitHub用户名，youremail输入你GitHub的邮箱。这样GitHub才能知道你是不是对应它的账户。用户名为仓库的名称，邮箱为注册github的邮箱。</p><p>防止输错可以检查：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure><p>2.接着进入到家目录：C:\Users\Zhenghong Chen，右击打开git bash 。</p><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C 2561618861@qq.com</span><br></pre></td></tr></table></figure><p>后面是自己注册github的邮箱，然后敲三次回车，</p><p><img src="https://img-blog.csdnimg.cn/b07cadba4a484a7eac9c19884ea6f3b5.png"></p><p>3.接着就会发现C:\Users\libinbin下多了一个.ssh目录，打开后有一个公钥，一个私钥。id_rsa.pub是公钥，我们需要打开它，复制里面的内容。</p><p>然后进入github：</p><p>点击setings</p><p>进行以下操作</p><p>发现我们需要一个密钥，把我们刚刚复制的密钥粘进去，title随便起</p><p>点击 Add SSH Key</p><h5 id="3-进行部署"><a href="#3-进行部署" class="headerlink" title="3.进行部署"></a>3.进行部署</h5><p>这一步，我们就可以将hexo和GitHub关联起来，也就是将hexo生成的文章部署到GitHub上，打开站点配置文件 _config.yml，翻到最后，修改为<br>YourgithubName就是你的GitHub账户</p><p>1.修改配置文件</p><p>修改内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:goubin18/goubin18.github.io.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure><p>注意：后面有空格</p><p>repo：获取步骤如下</p><p>点进自己刚刚创建的仓库，复制</p><p>2.找到自己的博客路径打开</p><p>这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>2.然后依次执行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo cl      #清除缓存文件 db.json 和已生成的静态文件 public</span><br><span class="line">hexo g       #生成网站静态文件到默认设置的 public 文件夹(hexo generate 的缩写)</span><br><span class="line">hexo d       #自动生成网站静态文件，并部署到设定的仓库(hexo deploy 的缩写)</span><br></pre></td></tr></table></figure><p>注意deploy时会让输个yes</p><p>最后回到github上查看自己的仓库：</p><p>这就表示上传成功。</p><p>现在就可以使用xxx.github.io来访问你的博客啦<br>例如：我的用户名是M4cr0Chen，那么我的博客地址就是M4cr0Chen.github.io</p><p>————————————————<br>版权声明：本文为CSDN博主「小尘要自信」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/qq_54796785/article/details/126053172">https://blog.csdn.net/qq_54796785/article/details/126053172</a></p>]]></content>
      
      
      <categories>
          
          <category> School </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
