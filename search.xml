<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>My Plants-vs-Zombies Development Log</title>
      <link href="/2023/12/17/2023-12-17/"/>
      <url>/2023/12/17/2023-12-17/</url>
      
        <content type="html"><![CDATA[<h2 id="My-Plants-vs-Zombies-Development-Log-2"><a href="#My-Plants-vs-Zombies-Development-Log-2" class="headerlink" title="My-Plants-vs-Zombies Development Log #2"></a>My-Plants-vs-Zombies Development Log #2</h2><p>I just finished my last final exam yesterday so hey, I finally got free time to work on this lil project :P</p><p>Just to recap, what I did in the first day are basically setting up a bunch of background images like the images for the lawn and the toolbar. The entire game interface is created so that’s a good start for me.</p><h4 id="What-I-did-afterward-are-following"><a href="#What-I-did-afterward-are-following" class="headerlink" title="What I did afterward are following:"></a>What I did afterward are following:</h4><ol><li>Implemented selection and dragging of the plants</li><li>Enabling the plants to be “planted” on the ground</li><li>Iteratively display the picture set in the res folder to create the waving animation of the plants</li><li>Created a starting menu of the game</li><li>Randomly creating Sunshine, and…</li><li>Display the random Sunshine.</li></ol><p>I defined the own structure like</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">struct sunshineBall &#123;</span><br><span class="line">int x, y; // Coordinates for the X and Y Coord of sunshine when falling</span><br><span class="line">int frameIndex; // Index for the current displaying picture</span><br><span class="line">int destY; // Y-Coord for the destination of the falling sunshine</span><br><span class="line">bool used; // Using or not</span><br><span class="line">int timer; //</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>which is exactly something we learned in CS135. I’m not gonna lie, struct are indeed very useful and convenient.</p><p>One of the confusing topic is the pointer variable and memories, I would’ve to read the textbook to understand what it does lol.</p><h4 id="Starting-Menu"><a href="#Starting-Menu" class="headerlink" title="Starting Menu"></a>Starting Menu</h4><p><img src="https://raw.githubusercontent.com/M4cr0Chen/MyPic/main/img/202312171122020.png" alt="img"></p><h4 id="Selecting-and-Dragging-Plants"><a href="#Selecting-and-Dragging-Plants" class="headerlink" title="Selecting and Dragging Plants"></a>Selecting and Dragging Plants</h4><p><img src="https://github.com/M4cr0Chen/MyPic/blob/main/img/202312171125413.png?raw=true" alt="202312171125413.png"></p><h4 id="Planting-the-Plant-to-the-center-of-lawn-block"><a href="#Planting-the-Plant-to-the-center-of-lawn-block" class="headerlink" title="Planting the Plant to the center of lawn block"></a>Planting the Plant to the center of lawn block</h4><p><img src="https://github.com/M4cr0Chen/MyPic/blob/main/img/202312171126291.png?raw=true" alt="202312171126291.png"></p><h4 id="Displaying-Random-Sunshine"><a href="#Displaying-Random-Sunshine" class="headerlink" title="Displaying Random Sunshine"></a>Displaying Random Sunshine</h4><p><img src="https://github.com/M4cr0Chen/MyPic/blob/main/img/202312171127493.png?raw=true" alt="202312171127493.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Game Development </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Math 135 Notes</title>
      <link href="/2023/12/14/Math135Notes/"/>
      <url>/2023/12/14/Math135Notes/</url>
      
        <content type="html"><![CDATA[<div class="row">    <embed src="/pdf/m135.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
      
      
      
        <tags>
            
            <tag> Course Notes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Math 137 Notes</title>
      <link href="/2023/12/14/Math137Notes/"/>
      <url>/2023/12/14/Math137Notes/</url>
      
        <content type="html"><![CDATA[<div class="row">    <embed src="/pdf/m137.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
      
      
      
        <tags>
            
            <tag> Course Notes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My Plants-vs-Zombies Development Log</title>
      <link href="/2023/12/13/2023-12-13/"/>
      <url>/2023/12/13/2023-12-13/</url>
      
        <content type="html"><![CDATA[<p>The project is based on C language, mainly focusing on C++. The IDE I used is Visual Studio 2022.</p><p>This is the first day of the development, I am looking forward of reproducing a well known 2D tower defense game Plants-vs-Zombies. I am new to C so I would’ve to learn all the basics and perhaps some deeper concepts of this programming language during the development. So for me basically this project is a pretty good preview of those bunch of concepts of C in advance.</p><p>I am planning to finish the project before the start of the winter term, which is gonna be January 8th. That being said I have roughly about 25 days to work on this project solely. Hopefully I can get over any bugs and errors during the development.</p><p>Following are what I did today,</p><ol><li>Create new project (empty project template) using any version of Visual Studio</li><li>Import materials</li><li>Implement primary game scene</li><li>Implement the tool bar at the top of the game panel</li><li>Implement the plant cards in the tool bar</li></ol><p><img src="https://raw.githubusercontent.com/M4cr0Chen/MyPic/main/img/202312132104368.png" alt="1"></p><p>Basically what I did today is to create an actual panel with size 900 * 600 (which is the default resolution of the original game) to display the content; added a background image; added a “tool bar” which held all the plants’ cards; wrote some functions that access the resource folder to get the available plant cards, and placed them on to the tool bar separated by a certain widths. Last thing I did today is to allow the program to peek message of user’s input, by far only left-click to grab up the plant, and yet not able to place the plants down. </p><p><img src="https://raw.githubusercontent.com/M4cr0Chen/MyPic/main/img/202312132106302.png" alt="2"></p><p><img src="https://raw.githubusercontent.com/M4cr0Chen/MyPic/main/img/202312132106995.png" alt="3"></p><p>C is honestly quite different from Racket,  the one I’ve down into for the past three months (it’s always waterloo 1A CS135), and honestly I’ve had enough of recursion. As an imperative language C works much different from functional languages like Lisp or Racket. It’s refreshing picking up concepts like for loop, while loop, if-else statements, and so on again. Even though the grammar mike seems identical between JAVA and C (and C++), I feel like they’re much different from each other as C really shows much more basic details of programming compared to JAVA.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Game Development </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Hexo的个人博客网站搭建的简易教程</title>
      <link href="/2023/07/13/2023-07-13/"/>
      <url>/2023/07/13/2023-07-13/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-Github-搭建个人博客从0到1教程"><a href="#Hexo-Github-搭建个人博客从0到1教程" class="headerlink" title="Hexo + Github 搭建个人博客从0到1教程"></a><a href="https://so.csdn.net/so/search?q=Hexo&spm=1001.2101.3001.7020">Hexo</a> + Github 搭建个人博客从0到1教程</h1><h3 id="一、正式搭建博客前需要做的准备（软件安装）"><a href="#一、正式搭建博客前需要做的准备（软件安装）" class="headerlink" title="一、正式搭建博客前需要做的准备（软件安装）"></a>一、正式搭建博客前需要做的准备（软件安装）</h3><h5 id="搭建前置准备软件："><a href="#搭建前置准备软件：" class="headerlink" title="搭建前置准备软件："></a>搭建前置准备软件：</h5><p>Git：官网下载：<a href="https://git-scm.com/">https://git-scm.com/</a></p><p>Node.js 官网下载：<a href="http://nodejs.cn/">http://nodejs.cn/</a></p><h3 id="二、Hexo的安装"><a href="#二、Hexo的安装" class="headerlink" title="二、Hexo的安装"></a>二、Hexo的安装</h3><p>个人经历，国内使用npm经常出现莫名其妙报错情况（个人搭建过程中遇到不少次这样情况），于是在其他大佬的博客中学习到使用淘宝镜像源。</p><ol><li><h5 id="我们这里利用npm先安装cnpm"><a href="#我们这里利用npm先安装cnpm" class="headerlink" title="我们这里利用npm先安装cnpm"></a>我们这里利用npm先安装cnpm</h5></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>cnpm个人认为非常强大，当你遇到npm install “xxx” 出现恶心人的报错时（没错，你在搭建的过程中绝对会遇到至少几个抽象的报错，没有人能逃离 | 笑），不妨重新输入一次该死的指令，然后在指令前面加一个小巧可爱的 “ c ”。嗯，很多时候这样简单的操作就可以解决问题。</p><ol start="2"><li><h5 id="Win键输入-“Command”-或-“命令提示符”-打开cmd窗口，输入指令："><a href="#Win键输入-“Command”-或-“命令提示符”-打开cmd窗口，输入指令：" class="headerlink" title="Win键输入 “Command” 或 “命令提示符” 打开cmd窗口，输入指令："></a>Win键输入 “<strong>Command</strong>” 或 “<strong>命令提示符</strong>” 打开cmd窗口，输入指令：</h5></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure><ol start="3"><li><h5 id="在本地创建一个文件夹"><a href="#在本地创建一个文件夹" class="headerlink" title="在本地创建一个文件夹"></a>在本地创建一个文件夹</h5></li></ol><p>个人起名为Blog因为好记好认。随后右键 &#x2F; 点击Git Bash （这里就是我们会最常用到的命令终端窗口了，不过之后建议用Visual Studio Code的终端，会更好用）</p><ol start="4"><li><h5 id="初始化Hexo"><a href="#初始化Hexo" class="headerlink" title="初始化Hexo"></a>初始化Hexo</h5></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><ol start="5"><li><h5 id="检验hexo是否能够启动成功"><a href="#检验hexo是否能够启动成功" class="headerlink" title="检验hexo是否能够启动成功"></a>检验hexo是否能够启动成功</h5></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>看到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO  Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure><p>表示hexo成功启动</p><ol start="6"><li><h5 id="博客文件初始化成功后，来看看你的Blog文件夹里都有什么"><a href="#博客文件初始化成功后，来看看你的Blog文件夹里都有什么" class="headerlink" title="博客文件初始化成功后，来看看你的Blog文件夹里都有什么"></a>博客文件初始化成功后，来看看你的Blog文件夹里都有什么</h5><ol><li>node_modules: 依赖包 （后期魔改网站用到如pug，stylus，以及一大堆dependencies都会存放在这个网站）</li><li>public：存放生成的页面</li><li>scaffolds：生成文章的一些模板</li><li>source：用来存放你的文章，css文件，js文件，后期写文章就要用到这个文件夹</li><li>themes：主题（如果使用的是 git clone 则会下载到这个文件夹中，如果是 npm install 则会在上面1. node_modules 里）</li><li>_config.yml: 博客的配置文件 （这个文件很重要，是整个网页的基底，千万要保存好）</li></ol></li><li><h5 id="此时到浏览器里输入"><a href="#此时到浏览器里输入" class="headerlink" title="此时到浏览器里输入"></a>此时到浏览器里输入</h5></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:4000/</span><br></pre></td></tr></table></figure><p>即可看到你最初始化的博客网页了。</p><p>记住这个时候你的博客网页都只是本地文件，你也能看见你进入的网址为localhost，而你需要把你本地的文件部署到互联网上，别人才能通过输入域名来访问你的网站。</p><p>怎么做呢？我们使用大伙最常用的方式：部署到Github进行代码云保管。</p><h3 id="三，将Hexo部署到Github"><a href="#三，将Hexo部署到Github" class="headerlink" title="三，将Hexo部署到Github"></a>三，将Hexo部署到Github</h3><h5 id="1-Github创建个人仓库"><a href="#1-Github创建个人仓库" class="headerlink" title="1.Github创建个人仓库"></a>1.Github创建个人仓库</h5><p>首先，需要有一个github账号。登上账号后建一个仓库：仓库名为你的用户名.github.io，<br>举例如下：<br>创建一个和你用户名相同的仓库，后面加.github.io，<br>只有这样，将来要部署到GitHub的时候，才会被识别，也就是xxxx.github.io，其中xxx就是你注册GitHub的用户名.</p><h5 id="2-生成ssh添加到Github"><a href="#2-生成ssh添加到Github" class="headerlink" title="2.生成ssh添加到Github"></a>2.生成ssh添加到Github</h5><h5 id="在Github上创建仓库完成之后，需要设置ssh免密登录"><a href="#在Github上创建仓库完成之后，需要设置ssh免密登录" class="headerlink" title="在Github上创建仓库完成之后，需要设置ssh免密登录"></a>在Github上创建仓库完成之后，需要设置ssh免密登录</h5><p>1.打开cmd窗口：执行如下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;yourname&quot;</span><br><span class="line">git config --global user.email &quot;youremail&quot;</span><br></pre></td></tr></table></figure><p>这里的yourname输入你的GitHub用户名，youremail输入你GitHub的邮箱。这样GitHub才能知道你是不是对应它的账户。用户名为仓库的名称，邮箱为注册github的邮箱。</p><p>防止输错可以检查：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure><p>2.接着进入到家目录：C:\Users\Zhenghong Chen，右击打开git bash 。</p><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C 2561618861@qq.com</span><br></pre></td></tr></table></figure><p>后面是自己注册github的邮箱，然后敲三次回车，</p><p><img src="https://img-blog.csdnimg.cn/b07cadba4a484a7eac9c19884ea6f3b5.png"></p><p>3.接着就会发现C:\Users\libinbin下多了一个.ssh目录，打开后有一个公钥，一个私钥。id_rsa.pub是公钥，我们需要打开它，复制里面的内容。</p><p>然后进入github：</p><p>点击setings</p><p>进行以下操作</p><p>发现我们需要一个密钥，把我们刚刚复制的密钥粘进去，title随便起</p><p>点击 Add SSH Key</p><h5 id="3-进行部署"><a href="#3-进行部署" class="headerlink" title="3.进行部署"></a>3.进行部署</h5><p>这一步，我们就可以将hexo和GitHub关联起来，也就是将hexo生成的文章部署到GitHub上，打开站点配置文件 _config.yml，翻到最后，修改为<br>YourgithubName就是你的GitHub账户</p><p>1.修改配置文件</p><p>修改内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:goubin18/goubin18.github.io.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure><p>注意：后面有空格</p><p>repo：获取步骤如下</p><p>点进自己刚刚创建的仓库，复制</p><p>2.找到自己的博客路径打开</p><p>这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>2.然后依次执行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo cl      #清除缓存文件 db.json 和已生成的静态文件 public</span><br><span class="line">hexo g       #生成网站静态文件到默认设置的 public 文件夹(hexo generate 的缩写)</span><br><span class="line">hexo d       #自动生成网站静态文件，并部署到设定的仓库(hexo deploy 的缩写)</span><br></pre></td></tr></table></figure><p>注意deploy时会让输个yes</p><p>最后回到github上查看自己的仓库：</p><p>这就表示上传成功。</p><p>现在就可以使用xxx.github.io来访问你的博客啦<br>例如：我的用户名是M4cr0Chen，那么我的博客地址就是M4cr0Chen.github.io</p><p>————————————————<br>版权声明：本文为CSDN博主「小尘要自信」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/qq_54796785/article/details/126053172">https://blog.csdn.net/qq_54796785/article/details/126053172</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>国外对飞行员的要求，是不是比国内相对宽松些？</title>
      <link href="/2023/07/12/2022-07-03/"/>
      <url>/2023/07/12/2022-07-03/</url>
      
        <content type="html"><![CDATA[<p>体检应该都差不多，但是管辖制度方面绝绝对对的宽松许多，相比较起国内的航司来说。。。</p><p>最简单的例子。由于国内航司的“卖身契”制度，一旦入了这个公司这辈子很难转公司了，违约金摆在那里（详情参见深航939万赔款事件）。但是之所以这样也是有原因的，毕竟国内121飞行员估计都是委培生，由航司帮忙出钱一路不掏钱包读的飞行专业吧（包括出国航校学飞啥的），人家航司投入这么多米给你一个学生把你好不容易培养成合格的商业飞行员，岂是你说想走就能走的？要是人家给你公费学飞了你还润了这不纯纯白费钱吗？另外，国内自费能不能学飞？能，但是不好出来，甚至花了大几十万找不着工作的都有。这一点呢，其实牵扯到中国缺不缺飞行员。你说缺吧，每年航司能支配得起的学生就那么些；你说不缺吧，飞行员在国内之所以能成金饭碗还就是因为他是个稀缺技术工种（国外的飞行员大把，毕竟起步早的很，老外飞行员就是一司机身份，不像国内另外一个阶级那样的），所以每年都要招飞行学员来填窟窿。所以说国内飞行员普遍现象就是，能搁国内在天上蹬大三轮的都是航司委培出来的，而自费的顶多去通航（大部分人意识里的“飞行员”应该都是开干线的那类吧），所以国内飞行员基本上都是归属于“卖身契”制度内的飞行员，而这些飞行员所在的公司呢，。。一言难尽，好比三大行，国企嘛，风气肯定是比私企死板点的，这么一说就会使得大多飞行员觉得国内飞行员待遇，生涯不宽松。</p><p>实际上好比说我未来要去念书的加拿大，那边的飞行员只有自费这一说。你想学飞，好，你自个掏钱，掏完钱学了ppl，cpl，ifr还不说，我把你的ATPL给”冻结“了。我不给你开干线，欸就是卡着你。等你飞够小飞机攒够时间了才让你进阶。所以说加拿大航校总是能见到一帮20岁出头就来当教练教没比自己小多少的学生ppl啥的，就是为了攒时间（甚至怀疑有些教练无理由刻意卡学生不让他过就是为了多积累些小时数给自己早解锁ATPL。。）。这么样有个好处就是老一辈干线飞行员不容易被新晋的年轻飞行员淘汰掉，老的干完自己的工时到年龄退休啦，新一辈儿飞行员也攒够时间解锁ATPL了，这样就不会堆积飞行员以至于副驾驶一大堆闲置没得飞，机长又贼稀缺的情况。。。另外，加拿大飞行员自费学完是可以想找工作一样随意跳槽啊什么的，不会被捆绑到一个公司里这样子。。也不用担心违约金。</p><p>总而言之啦，如果你想要相对来说自由+随性+open的工作环境，不用老开会复盘，平时休息钓钓鱼喝喝茶这样子的话就去外国罢。但是问题所在也就是生涯晋升的速度慢很多很多，我已经做好40岁上320右座，50岁机长的心态了。相对来讲，国内是在规章制度上把持的相对严格一些，不准许出一点差错是准则，一个不是就会停飞的那种，不禁让人提心吊胆。但反过来的好处就是20出头就能抡大灰机，30左右登左席。得由你自己做取舍。。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学生党预算6000是买 iPad Air 还是 iPad Pro?</title>
      <link href="/2022/08/05/2022-08-05/"/>
      <url>/2022/08/05/2022-08-05/</url>
      
        <content type="html"><![CDATA[<p>首先先考虑一个问题，你能不能接受64GB的ipad。</p><p>3999，64GB的ipad air5 固然很香，你6k的预算除去4k买个笔甚至还能再买个combo touch+纸膜。但是凭个人经验来讲64GB的体验感只能符合“能用”，达不到”妙用“。原因很简单：ipad air 5只有两个储存选项，64GB和256GB，其中256GB的air5本身就完全是一个促进你去购买128GB iPad Pro的专属通道。</p><p>我这么说可能有些奇怪，不过往下一看你也能发现类似的操作：ipad普通非全贴合屏幕版本，是不是也是只有64GB和256GB的选项？在你考虑是2499买一台64GB iPad还是256GB iPad时，你会根据理性的大脑想到，3699的iPad不是就和64GB的ipad Air 5差了300块钱吗？那既然ipad Air 5有全贴合，有m1，有全面屏幕，屏幕素质也更好，我们自然而然地会更倾向于购买ipad air 5。好的，这时候你就彻底的陷入了库克——“库存克星”的圈套了。</p><p>同样，在你想要买ipad air5时，如果你只想购买64GB并且笃定小内存能够满足你在可预期的一定年数内能够满足需求，请买64GB air 5。如果你认为64GB完全不够用，即便是使用上了iCloud方案之后也是，而你开始考虑要不要买256GB的air 5时，请立即决定购买iPad Pro 128GB。有没有发现库克下属的产品都没搞，但偏偏就给pro上了个128gb？没错，这个方案就是精心设计出来来拯救（坑） 我们这些想要大容量且对性能有一定要求的用户滴！因为你买256G的air5属实又太大，air5这时候的小毛病便会被无限放大，比如没有FaceID，比如扬声器，比如刷新率，这会使用户体验到一股强烈的“吕布骑狗”的滋味。。。都既然花了5k5买了air 5 大胃版了，为啥不加200块钱上个全方面顶配升级的中胃版的pro呢？</p><p>知名科技YouTuber， MKBHD 关于 air5 的视频里讲到有本书叫“The Myth of Fair Value”，其中提及了一个概念叫Purchasing Pattern（采购模式）。概括来讲就是人们会倾向选择折中的方案进行购买，而这通常是非理性的。</p><p>再说一点，如果6k满打满算买了ipad pro的话，还剩下200块钱买套壳加膜，教育优惠送的airpods2可以转手卖了再买个apple pencil回来，血赚！</p><p><img src="D:\Blog\source\goodPictures\v2-aa3c8059c5e8036758cc904b07bbdcbf_r.jpg" alt="v2-aa3c8059c5e8036758cc904b07bbdcbf_r"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
